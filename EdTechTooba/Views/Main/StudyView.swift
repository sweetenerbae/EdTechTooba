//
//  StudyView.swift
//  EdTechTooba
//
//  Created by Diana Kuchaeva on 24.08.25.
//

import SwiftUI

struct StudyView: View {
    @StateObject var vm = StudyViewModel()

    var body: some View {
        ScrollView {
            VStack(spacing: 20) {
                // –ü–æ–∏—Å–∫
                SearchRow(searchText: $vm.searchText)

                Divider().padding(.top, 4)

                // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                SectionCardGray(
                    title: "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                    subtitle: "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ –ø—Ä–æ–π–¥—è —Ç–µ—Å—Ç",
                    trailingEmoji: "üí°"
                ) {
                    // –¥–≤–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Ä—è–¥
                    HStack(spacing: 12) {
                        ForEach(vm.recs.prefix(2)) { r in
                            RecommendationTile(rec: r)
                        }
                    }

                    ExpandRow(
                        title: "–ï—â—ë \(vm.hiddenRecsCount) –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
                        subtitle: "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º",
                        isExpanded: $vm.recsExpanded
                    )
                }

                // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ï–ì–≠
                SectionCardGray(
                    title: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ï–ì–≠",
                    subtitle: "–®–∫–æ–ª—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠ –ø–æ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ",
                    trailingEmoji: "üìö"
                ) {
                    HStack(spacing: 12) {
                        ForEach(vm.partners) { p in
                            PartnerTile(partner: p)
                        }
                    }
                }

                // –ü–æ–¥–∫–∞—Å—Ç—ã
                SectionCardGray(
                    title: "–ü–æ–¥–∫–∞—Å—Ç—ã",
                    subtitle: "–ö—Ä–∞—Å–∏–≤—ã–π –≥–æ–ª–æ—Å –∏ –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                    trailingEmoji: "üéô"
                ) {
                    ScrollView(.horizontal, showsIndicators: false) {
                        HStack(spacing: 12) {
                            ForEach(vm.podcasts) { p in
                                PodcastTile(podcast: p)
                            }
                        }
                        .padding(.horizontal, 2)
                    }
                }
            }
            .padding(.horizontal, 16)
            .padding(.vertical, 8)
        }
        .background(Color("whiteAsset").ignoresSafeArea())
        .navigationTitle("–£—á—ë–±–∞")
    }
}

// MARK: - Reusable pieces

private struct SectionCardGray<Content: View>: View {
    let title: String
    let subtitle: String?
    let trailingEmoji: String?
    @ViewBuilder var content: Content

    init(title: String, subtitle: String? = nil, trailingEmoji: String? = nil, @ViewBuilder content: () -> Content) {
        self.title = title
        self.subtitle = subtitle
        self.trailingEmoji = trailingEmoji
        self.content = content()
    }

    var body: some View {
        VStack(alignment: .leading, spacing: 14) {
            HStack(alignment: .top) {
                VStack(alignment: .leading, spacing: 4) {
                    Text(title).font(.system(size: 24, weight: .heavy))
                    if let subtitle {
                        Text(subtitle).foregroundStyle(.secondary)
                    }
                }
                Spacer()
                if let trailingEmoji { Text(trailingEmoji).font(.system(size: 40)) }
            }
            content
        }
        .padding(16)
        .background(Color.cardGray)
        .clipShape(RoundedRectangle(cornerRadius: 18, style: .continuous))
    }
}

private struct RecommendationTile: View {
    let rec: StudyViewModel.Recommendation
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            HStack(spacing: 8) {
                Text(rec.emoji).font(.title3)
                Text(rec.title).font(.headline).lineLimit(1)
                Spacer()
            }
            Text(rec.subtitle).foregroundStyle(.secondary)
        }
        .padding(14)
        .frame(maxWidth: .infinity)
        .background(Color("whiteAsset"))
        .clipShape(RoundedRectangle(cornerRadius: 16))
    }
}

private struct ExpandRow: View {
    let title: String
    let subtitle: String
    @Binding var isExpanded: Bool
    var body: some View {
        Button {
            withAnimation(.spring(response: 0.3, dampingFraction: 0.9)) { isExpanded.toggle() }
        } label: {
            HStack(alignment: .firstTextBaseline) {
                VStack(alignment: .leading, spacing: 4) {
                    Text(title).font(.headline)
                    Text(subtitle).foregroundStyle(.secondary)
                }
                Spacer()
                Image(systemName: isExpanded ? "chevron.up" : "chevron.down")
                    .font(.headline)
                    .foregroundStyle(.secondary)
            }
            .padding(14)
            .background(Color("whiteAsset"))
            .clipShape(RoundedRectangle(cornerRadius: 16))
        }
        .buttonStyle(.plain)
    }
}

private struct PartnerTile: View {
    let partner: StudyViewModel.Partner
    var body: some View {
        VStack(spacing: 10) {
            RoundedRectangle(cornerRadius: 16)
                .fill(Color("whiteAsset"))
                .frame(height: 120)
                .overlay(
                    Group {
                        if UIImage(named: partner.logo) != nil {
                            Image(partner.logo).resizable().scaledToFit().padding(16)
                        } else {
                            Text(partner.title.prefix(2)).font(.title).bold()
                        }
                    }
                )
            Text(partner.title).font(.headline)
        }
        .frame(maxWidth: .infinity)
    }
}

private struct PodcastTile: View {
    let podcast: StudyViewModel.Podcast
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            RoundedRectangle(cornerRadius: 16)
                .fill(Color("whiteAsset"))
                .frame(width: 200, height: 120)
                .overlay(
                    Group {
                        if UIImage(named: podcast.cover) != nil {
                            Image(podcast.cover).resizable().scaledToFill().clipShape(RoundedRectangle(cornerRadius: 16))
                        } else {
                            Rectangle().fill(Color.cardGray)
                        }
                    }
                )
            Text(podcast.title).font(.headline).lineLimit(2)
        }
        .frame(width: 200, alignment: .leading)
    }
}

// MARK: - Preview

#Preview {
    NavigationStack { StudyView() }
}
